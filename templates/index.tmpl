<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <link rel="stylesheet" href="/static/css/w3.css" />
        <link rel="stylesheet" href="/static/css/w3-theme.css" />
        <link rel="stylesheet" href="/static/css/slider.css" />
        <script defer src="/static/js/cdn.min.js"></script>
        <script src="/static/js/joy.js"></script>
        <title>ALARIS Wheelchair Control</title>
    </head>
    <body x-data="{isConnected:{{ .isConnected }}, mode: '{{ .mode }}'}" style="width: 100%; max-width: 500px; margin: auto;" class="w3-border">
        <div class="w3-container w3-theme">
            <h1>ALARIS Wheelchair Control</h1>
            <!-- <h2>Mode: {{.mode}}</h2> -->
        </div>
        <div x-show="!isConnected">
            <h2>Status: <span x-text="isConnected?'':'Not '+'Connected'"></span></h2>
            <button class="w3-button w3-theme-l3" onclick="location.reload();">Reload page</button>
        </div>
        <div x-show="isConnected">
            <div x-data="{ Channels: ['ch1', 'ch2'] }">
                <button @click="sendAction('/action/on')" class="w3-button w3-theme-l3">Turn On</button>
                <button @click="sendAction('/action/off')" class="w3-button w3-theme-l3">Turn off</button>
                <button @click="sendAction('/action/horn')" class="w3-button w3-theme-l3">Horn</button>
                <button @click="sendAction('/action/speedUp')" class="w3-button w3-theme-l3">Speed Up</button>
                <button @click="sendAction('/action/speedDown')" class="w3-button w3-theme-l3">Speed Down</button>
                <button @click="setTo0" class="w3-button w3-theme-l3">Set to 2.5</button>
                <select onchange="{
                    sendAction('changeModeTo'+this.value);
                    setTimeout(function(){location.reload();}, 100);
                    // location.reload();
                }">
                    <option value="Change input method" disabled selected>Change input method</option>
                    <option value="Slider">Slider</option>
                    <option value="Joystick">Joystick</option>
                </select>

                <div x-show="mode == 'slider'">
                    <template x-ref="sliderz" x-for="(Channel, index) in Channels" :key="index">
                        <div class="slidecontainer" x-data="{ count: 3.42 }">
                            Channel (<span x-text="Channel"></span>) - <span x-text="Math.round(100*(count/5*3.65))/100"></span>V <span x-text="'pwm set to '+count+'V'" class="w3-opacity-max w3-tiny"></span>
                            <input @change="sliderEvent(index,count)" x-model="count" type="range" min="1.84" max="5" step="0.01" class="slider">
                        </div>
                    </template>
                </div>
                <div x-show="mode == 'joystick'">
                    <div id="joyDiv" style="width:200px;height:200px;margin:auto;"></div>
                </div>
                
            </div>
            
        </div>
    </body>

    <script>
        let body = document.querySelector('body')
        

        async function sendAction(req) {
            this.posts = await (await fetch(req)).json();
            if (this.posts.error == "not connected"){
                location.reload()
            }
            console.log(this.posts);
        }

        async function checkConnection() {
            fetch('/status').then((res) => res.json()).then((data) => {
                if (!data.isConnected){
                    
                }
            })
        }

        function setTo0(){
            for (i=0; i<2; i++){
                sliderEvent(i, 3.42);
                
            }
            location.reload();
        }

        function sliderEvent(id, val){
            sendAction('/action/'+id+'/'+ Math.round(val / 5 * 255));
            console.log(id+' '+val);
        }
    </script>
    <script defer>
        checkConnection()
        for (i=0; i<2; i++){
                sliderEvent(i, 3.42);
        }
        var joyParam = {
             "internalFillColor": "#839ef0",
             "internalStrokeColor" : "#839ef0",
             "externalStrokeColor" : "#839ef0",
        };
        var joy = new JoyStick('joyDiv',joyParam);
        if ('{{ .mode }}' == 'joystick') {
            setInterval(function(){
                sendAction('/action/'+0+'/'+ Math.round((34900+161*joy.GetY())/200));
                sendAction('/action/'+1+'/'+ Math.round((34900+161*joy.GetX())/200));
                // console.log( Math.round((34900+161*joy.GetX())/200)  ); 
            }, 100);
        }
    </script>
</html>